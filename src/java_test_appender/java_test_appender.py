import re
from typing import List
from file_operations.file_ops import FileOperations


class JavaTestApender:
    def __init__(self):
        pass

    def insert_tests_into_suite(self, test_suite_file_path: str, test_list: List[str]):
        existing_suite = FileOperations.read_file(test_suite_file_path)
        new_test_suite = existing_suite[::-1].replace(
            "}", "\n    {GENERATED_TESTS}\n\n}"[::-1], 1
        )[::-1]
        new_test_suite = new_test_suite.replace(
            "{GENERATED_TESTS}", "\n    ".join(test_list)
        )
        FileOperations.write_file(test_suite_file_path, new_test_suite)

    def insert_tests_into_driver(
        self, test_driver_file_path: str, test_list: List[str]
    ) -> None:
        test_list = self._extract_test_names(test_list)
        content = FileOperations.read_file(test_driver_file_path)
        if_block_pattern = r"if\s*\(\s*hadFailure\s*\)\s*\{"
        new_tests = "\n".join(
            [
                f"""
            // Test generated by LLM
            try {{
                t0.{test}();
            }} catch (Throwable e) {{
                hadFailure = true;
                e.printStackTrace();
            }}
            """
                for test in test_list
            ]
        )
        new_content = re.sub(if_block_pattern, new_tests + r"\g<0>", content)
        FileOperations.write_file(test_driver_file_path, new_content)

    def _extract_test_names(self, test_list: List[str]) -> List[str]:
        test_name_regex = r"public void (\w+)\(\)"
        compiled_test_names = [
            re.search(test_name_regex, test).group(1)
            for test in test_list
            if re.search(test_name_regex, test)
        ]
        return compiled_test_names
